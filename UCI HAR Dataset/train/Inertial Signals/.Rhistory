plot(x)
hist(x)
y <- runif(100)
hist(y)
?gl
?tapply
?range
f <- gl(2)
?gl
f <- gl(4,5)
f
?traceback
?solve
?matrix
?is.null
?return
x <- 5
x
return(x)
return(mean(c(1,3,5)))
x <- c(1,3,5)
x
mean(x)
z <- mean(x)
y
y
z
return(z)
get <- function() x
?function
x
?function()
x
set <- function(y){x <<- y}
set(3)
x
geee <- function(){5}
geee()
geer <- function() 5
geer()
?mean
set <- function(y){x <<- y}
set <- function(y){
x <<- y
m <<- NULL
}
setmean <- function(mean) m <<- mean
mean
setmean(4)
getmean <- function() m
getmean()
m
?rpois
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(2)
rpois(5,2)
set.seed(2)
rpois(5,2)
rpois(5,2)
set.seed(2)
rpois(5,2)
set.seed(3)
rpois(5,2)
rpois(5,2)
set.seed(3)
rpois(5,2)
set.seed(1)
rpois(5,2)
?sample
?debug
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)          #bis hier aus internet
}
a <- c(1, 2, 3)
b <- c(4, 5, 6)
c <- c(7, 8, 9)
x <- rbind(a, b, c)
x
?matrix
y <- matrix(1:16, 4, 4)
y
x <- y
x
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[getmatrix()]]
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cachesolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)          #bis hier aus internet
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x[[getmatrix()]]
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x[[getmean()]]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 5, 2, 4, 4, 1, 7, 3)
makeVector(x)
cachemean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <<- function(mean) m <<- mean
getmean <<- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x[[getmean()]]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
cachemean(x)
a <- makeVector(c(1,2,3,4))
a
a$get()
a
a
a
x
x <- makeVector(x)
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()                         #
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x <- makeVector(x)
x
x$getmean()
x$get()
a <- makeVector(x)
cachemean(a)
a <- makeVector(c(1,2,3,4))
a$getmean()
a
a$get()
a$set()
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <<- function(mean) m <<- mean
getmean <<- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}                                        # returns a list of 4 elements
a <- makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()                         #
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 2, 3, 4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <<- function(mean) m <<- mean
getmean <<- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()                         #
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)          #bis hier aus internet
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getmatrix()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
c <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
c
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getinverse = getinverse)          #bis hier aus internet
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getinverse()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getinverse <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getinverse = getinverse)          #bis hier aus internet
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getinverse()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
z = 1
y = 1
x1 = 0.5
x 2 = 5
x2 = 5
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2)
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2),
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
library(lattice)
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2),
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
getwd()
install.packages("installr")
library(installr)
install.packages("dplyr")
setwd("C:/Users/Nina/Documents/DataScience/Coursera Course/3. Getting and Cleaning Data/Projekt/UCI HAR Dataset")
setwd("test/")
test1 <- read.table("X_test.txt")
View(test1)
test2 <- read.table("y_test.txt")
test3 <- read.table("subject_test.txt")
View(test2)
View(test3)
setwd("Inertial Signals/")
test4 <- read.table("body_acc_x_test.txt")
View(test4)
test5 <- read.table("body_acc_y_test.txt")
test6 <- read.table("body_acc_z_test.txt")
test7 <- read.table("body_gyro_x_test.txt")
test8 <- read.table("body_gyro_y_test.txt")
test9 <- read.table("body_gyro_z_test.txt")
test10 <- read.table("total_acc_x_test.txt")
View(test1)
View(test10)
View(test2)
View(test1)
test <- cbind(test1, test2, test3, test4, test5, test6, test7, test8, test9, test10)
getwd()
setwd("..")
setwd("..")
getwd()
dir()
setwd("/train")
setwd("train/")
getwd()
train1 <- read.table("X_train.txt")
train2 <- read.table("y_train.txt")
train3 <- read.table("subject_train.txt")
setwd("Inertial Signals/")
train4 <- read.table("body_acc_x_train.txt")
train5 <- read.table("body_acc_y_train.txt")
train6 <- read.table("body_acc_z_train.txt")
train7 <- read.table("body_gyro_x_train.txt")
train8 <- read.table("body_gyro_y_train.txt")
train9 <- read.table("body_gyro_z_train.txt")
train10 <- read.table("total_acc_x_train.txt")
train <- cbind(train1, train2, train3, train4, train5, train6, train7, train8, train9, train10)
View(train)
View(test)
View(train)
names(train)
length(names(train))
names(train) <- c(seq(1,1459))
View(train)
names(train) <- seq(V1, V1459)
names(train) <- c(seq(V1,V1459))
length(names(test))
names(test) <- c(seq(1,1459))
names(train)
names(test)
