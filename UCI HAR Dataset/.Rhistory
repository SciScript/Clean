set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <<- function(mean) m <<- mean
getmean <<- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}                                        # returns a list of 4 elements
a <- makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()                         #
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 2, 3, 4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <<- function(mean) m <<- mean
getmean <<- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()                         #
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)          #bis hier aus internet
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getmatrix()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
c <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
c
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getinverse = getinverse)          #bis hier aus internet
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getinverse()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #m wird NULL gesetzt
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x                       #= function(){x}; always returns value x
setmatrix <- function(solve) m <<- solve
getinverse <- function() m                   # always returns m
list(set = set, get = get,
setmatrix = setmatrix,
getinverse = getinverse)          #bis hier aus internet
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
makeCacheMatrix(x)
m <- x$getinverse()
if(!is.null(m)){                        #if expression m is not NULL, then..
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
z = 1
y = 1
x1 = 0.5
x 2 = 5
x2 = 5
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2)
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2),
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
library(lattice)
pdf("dina3b.pdf", width = 3.9370, height = 3.0276)
xyplot(yyy1 + yyy2~x, type = "l", lty = 1, lwd=2,
xlab = list(label="E / V", cex=0.92),
ylab = list(label="i / nA", cex=0.92),
scales = list(tck=2, cex=2),
par.settings=
list(layout.heights=
list(xlab.axis.padding=0.1,
top.padding=-4.6,
bottom.padding=0),
layout.widths=
list(ylab.axis.padding=0.1,
left.padding=0,
right.padding=-2.5)))
dev.off()
getwd()
install.packages("installr")
library(installr)
install.packages("dplyr")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
siwrl()
swirl()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students, sex_class, count, -grade)
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
stundents3
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = c(passed"))
)
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?select
?gather
?separate
submit()
?group_by
submit()
library(swirl)
swirl()
this_moment
this_moment <- update(this_moment, hours = 5, minutes = 51)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
read.table
?read.table
library(plyr)
library(dplyr)
library(tidyr)
test <- read.table("test/X_test.txt", stringsAsFactors = FALSE)
setwd("C:/Users/Nina/Documents/DataScience/Coursera Course/3. Getting and Cleaning Data/Projekt/UCI HAR Dataset")
test <- read.table("test/X_test.txt", stringsAsFactors = FALSE)
features <- read.table("features.txt")
features <- read.table("features.txt", stringsAsFactors = FALSE)
features1 <- read.table("features.txt")
class(features1$V2)
class(features$V2)
a <- select(features, V2)
names(test) <- a
View(test)
test <- read.table("test/X_test.txt")
View(test)
names(test) <- features$V2
View(test)
setwd("C:/Users/Nina/Documents/DataScience/Coursera Course/3. Getting and Cleaning Data/Projekt/UCI HAR Dataset")
library(plyr)
library(dplyr)
library(tidyr)
# read in the main datasets X_test.txt and X_train.txt
test <- read.table("test/X_test.txt")
train <- read.table("train/X_train.txt")
# Introduce the column names from features.txt
features <- read.table("features.txt", stringsAsFactors = FALSE)
names(test) <- features$V2
names(train) <- features$V2
View(test)
?select
seletest <- test[,grepl("mean()|std()", names(test))]
seletest1 <- Select(test, contains("mean()|std()")
)
seletest1 <- select(test, contains("mean()|std()"))
length(test(names))
length(names(test))
length(unique(names(test)))
setwd("C:/Users/Nina/Documents/DataScience/Coursera Course/3. Getting and Cleaning Data/Projekt/UCI HAR Dataset")
library(plyr)
library(dplyr)
library(tidyr)
# read in the main datasets X_test.txt and X_train.txt
test <- read.table("test/X_test.txt")
train <- read.table("train/X_train.txt")
# Introduce the column names from features.txt
features <- read.table("features.txt", stringsAsFactors = FALSE)
names(test) <- features$V2
names(train) <- features$V2
## Reduction of the datasets to columns containing the mean and the standard deviation
## of the respective values.
seletest <- test[,grepl("mean()|std()", names(test))]
seltest <- seletest[,!grepl("meanFreq", names(seletest))]
seletrain <- train[,grepl("mean()|std()", names(train))]
seltrain <- seletrain[,!grepl("meanFreq", names(seletrain))]
## Introduce the row names.
# Read in the files activity_labels.txt and y_test or y_train for labeling the rows with the
# respective activity.
activitylink <- read.table("activity_labels.txt")
activitytrain <- read.table("train/y_train.txt")
activitytest <- read.table("test/y_test.txt")
# Read in the files subject_train.txt and subject_test.txt labeling the rows with the
# subject number.
subjecttrain <- read.table("train/subject_train.txt")
subjecttest <- read.table("test/subject_test.txt")
# Introduce an index for activitytrain and activitytest.
activitytrain$index <- seq(1:nrow(activitytrain))
activitytest$index <- seq(1:nrow(activitytest))
# Rename the activities with "tidy names" (all lowercase letters).
activitylink$V2 <- tolower(activitylink$V2)
# Merge the datasets activitylink and activitytest/activitytrain, respectively.
testlab <- merge(activitylink, activitytest, by.x="V1", by.y="V1")
trainlab <- merge(activitylink, activitytrain, by.x="V1", by.y="V1")
# Sort datasets by the index.
testlab <- arrange(testlab, index)
trainlab <- arrange(trainlab, index)
# Attach the subject list to the datasets testlab and trainlab.
testlab$V3 <- subjecttest$V1
trainlab$V3 <- subjecttrain$V1
# rename the columns
names(testlab) <- c("labelcode", "activity", "index", "subject")
names(trainlab) <- c("labelcode", "activity", "index", "subject")
# Introduce the subject and activity columns to the seltest and seltrain dataset.
subject <- testlab$subject
activity <- testlab$activity
seltest <- cbind(subject, activity, seltest)
subject <- trainlab$subject
activity <- trainlab$activity
seltrain <- cbind(subject, activity, seltrain)
# Combines the datasets seltest and seltrain
final <- rbind(seltest, seltrain)
# Cleaning up the column names to "tidy names"(removal of special symbols, keep upper case
# letters only for clarity)
names(final) <- sub("\\()", "", names(final))
names(final) <- sub("-X", "X", names(final))
names(final) <- sub("-Y", "Y", names(final))
names(final) <- sub("-Z", "Z", names(final))
names(final) <- sub("-", "\\.", names(final))
names(final) <- sub(".mean", "Mean", names(final))
names(final) <- sub(".std", "Std", names(final))
# Group the resulting dataset final by subject and activity.
group <- group_by(final, subject, activity)
# Summarise the dataset group to receive the mean of avery column in the dataset group for every
# activity/subject pair.
tab <- summarise_each(group, funs(mean))
View(tab)
setwd("C:/Users/Nina/Documents/DataScience/Coursera Course/3. Getting and Cleaning Data/Projekt/UCI HAR Dataset")
library(plyr)
library(dplyr)
library(tidyr)
# read in the main datasets X_test.txt and X_train.txt
test <- read.table("test/X_test.txt")
train <- read.table("train/X_train.txt")
# Introduce the column names from features.txt
features <- read.table("features.txt", stringsAsFactors = FALSE)
names(test) <- features$V2
names(train) <- features$V2
## Reduction of the datasets to columns containing the mean and the standard deviation
## of the respective values.
seletest <- test[,grepl("mean()|std()", names(test))]
seltest <- seletest[,!grepl("meanFreq", names(seletest))]
seletrain <- train[,grepl("mean()|std()", names(train))]
seltrain <- seletrain[,!grepl("meanFreq", names(seletrain))]
## Introduce the row names.
# Read in the files activity_labels.txt and y_test or y_train for labeling the rows with the
# respective activity.
activitylink <- read.table("activity_labels.txt")
activitytrain <- read.table("train/y_train.txt")
activitytest <- read.table("test/y_test.txt")
# Read in the files subject_train.txt and subject_test.txt labeling the rows with the
# subject number.
subjecttrain <- read.table("train/subject_train.txt")
subjecttest <- read.table("test/subject_test.txt")
# Introduce an index for activitytrain and activitytest.
activitytrain$index <- seq(1:nrow(activitytrain))
activitytest$index <- seq(1:nrow(activitytest))
# Rename the activities with "tidy names" (all lowercase letters).
activitylink$V2 <- tolower(activitylink$V2)
# Merge the datasets activitylink and activitytest/activitytrain, respectively.
testlab <- merge(activitylink, activitytest, by.x="V1", by.y="V1")
trainlab <- merge(activitylink, activitytrain, by.x="V1", by.y="V1")
# Sort datasets by the index.
testlab <- arrange(testlab, index)
trainlab <- arrange(trainlab, index)
# Attach the subject list to the datasets testlab and trainlab.
testlab$V3 <- subjecttest$V1
trainlab$V3 <- subjecttrain$V1
# rename the columns
names(testlab) <- c("labelcode", "activity", "index", "subject")
names(trainlab) <- c("labelcode", "activity", "index", "subject")
# Introduce the subject and activity columns to the seltest and seltrain dataset.
subject <- testlab$subject
activity <- testlab$activity
seltest <- cbind(subject, activity, seltest)
subject <- trainlab$subject
activity <- trainlab$activity
seltrain <- cbind(subject, activity, seltrain)
# Combines the datasets seltest and seltrain
final <- rbind(seltest, seltrain)
# Cleaning up the column names to "tidy names"(removal of special symbols, keep upper case
# letters only for clarity)
names(final) <- sub("\\()", "", names(final))
names(final) <- sub("-X", "X", names(final))
names(final) <- sub("-Y", "Y", names(final))
names(final) <- sub("-Z", "Z", names(final))
names(final) <- sub("-", "\\.", names(final))
names(final) <- sub(".mean", "Mean", names(final))
names(final) <- sub(".std", "Std", names(final))
# Group the resulting dataset final by subject and activity.
group <- group_by(final, subject, activity)
# Remove all datasets
rm("final", "seltest", "seltrain", "activity", "subject", "testlab", "trainlab", "subjecttrain", "subjecttest", "seletest", "seletrain")
# Summarise the dataset group to receive the mean of avery column in the dataset group for every
# activity/subject pair.
tab1 <- summarise_each(group, funs(mean))
View(group)
View(tab1)
?rm
